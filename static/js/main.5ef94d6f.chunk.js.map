{"version":3,"sources":["components/NavigationItems.js","components/CharacterCard/CharacterCard.js","components/Pagination/Pagination.js","components/SvgLoader.js","components/Loading.js","components/RandomCharacterCard/RandomCharacterCard.js","components/CharactersList.js","components/Button.js","components/RandomCharacterCard/RandomCharacterList.js","components/Episodes/EpisodeCard.js","components/Episodes/EpisodeList.js","components/Quotes/QuoteCard.js","components/Quotes/CharacterImage.js","components/Quotes/SelectQuote.js","components/Quotes/QuotesButton.js","components/Quotes/QuoteList.js","components/Deaths/RandomDeathCard.js","components/Deaths/RandomDeathList.js","components/MainPage.js","components/MainTitle.js","App.js","index.js"],"names":["NavigationItems","useState","navItem","navigationItemsData","navigationItems","map","item","className","type","name","value","defaultChecked","indexOf","CharacterCard","Pagination","onClick","buttonElement","buttonCounts","SvgLoader","viewBox","xmlns","d","fill","Loading","RandomCharacterCard","nickname","birthday","img","status","portrayed","occupation","src","alt","CharactersList","props","handleButton","event","offsetCount","target","innerText","setState","currentPage","componentDidMount","page","isLoading","fetch","then","response","json","result","characters","state","this","char_id","toString","React","Component","Button","text","RandomCharacter","character","handleClick","key","EpisodeCard","id","title","season","episode","series","air_date","charactersList","join","cells","i","push","EpisodeList","handleChangeSeason","seasonCount","seasonByCount","episodes","filter","episodesToRender","episode_id","QuoteCard","quote","author","last_words","CharacterImage","SelectQuote","QuotesButton","getQuoteByAuthor","QuoteList","handleSubmit","e","preventDefault","searchValue","document","getElementById","url","quotes","characterImage","authorsList","getNoDoubleAuthor","authorData","unshift","Set","quoteAuthor","quote_id","RandomDeathCard","death","cause","responsible","RandomDeathList","death_id","MainPage","renderMapping","MainTitle","App","setNavItem","onChange","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5ef94d6f.chunk.js","sourcesContent":["import { useState } from \"react\"\n\nfunction NavigationItems() {\n    const [navItem, setNavItem] = useState('Random Character')\n\n    const navigationItemsData = ['Random Character', 'Characters', 'Episodes', 'Quotes', 'Deaths']\n\n    const navigationItems = navigationItemsData.map((item) => {\n      return (\n        <div key={navigationItemsData.indexOf(item)}>\n          <label className=\"App__navigation-item\" >\n          <input \n          type=\"radio\" \n          className=\"App__navigation-radio\" \n          key={navigationItemsData.indexOf(item)} \n          name=\"navigation-item\"\n          value={item} \n          defaultChecked={item === navItem}\n          />\n          {item}\n          </label>\n        </div>\n      )\n    }\n    )\n    return (\n      <form className=\"App__navigation-form\">\n        {navigationItems}\n      </form>\n    )\n}\n\nexport default NavigationItems","function CharacterCard({nickname, name, img, status}) {\n    const statusClassMapping = {\n        'Alive': 'character-card__text character-card-random__item_green',\n        'Deceased': 'character-card__text character-card-random__item_red',\n        'Presumed dead': 'character-card__text character-card-random__item_orange',\n    }\n\n    return (\n        <div className=\"character-card\">\n            <h1 className=\"character-card__title\">{nickname}</h1>\n            <img className=\"character-card__img\" src={img} alt={nickname} />\n            <span className=\"character-card__text\"><strong>Real name:</strong></span>\n            <span className=\"character-card__text\">{name}</span>\n            <span className=\"character-card__text\">\n                <strong>Status:</strong>\n                <span className={statusClassMapping[status]}>{status}</span> \n            </span>\n        </div>\n    )\n}\n\nexport default CharacterCard","const Pagination = ({\n    onClick,\n    buttonCounts\n    }) => {\n    const buttonElement = buttonCounts.map((item) => {\n        return (\n            <li className=\"pagination__item\" key={item}>\n                <button className=\"pagination__button\" onClick={onClick} key={item}>{item}</button>\n            </li>\n        )\n    })\n    return (\n        <ul className=\"pagination\">\n            {buttonElement}\n        </ul>\n    )\n}\n\nexport default Pagination","const SvgLoader = () => {\n    return (\n        <svg className=\"svgIcon\" viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M2.50251 7.5V8.5C2.50251 10.75 4.75251 13.5 8.00251 13.5C10 13.5 11.6187 12.5 12.6 11\" fill=\"none\"/>\n            <path d=\"M13.5 8.5V7.5C13.5 5.25 11.25 2.5 7.99997 2.5C6 2.5 4.38135 3.5 3.4 5\" fill=\"none\"/>\n            <path d=\"M4.5 9.5L2.50254 7.5L0.752533 9.75\" fill=\"none\"/>\n            <path d=\"M11.5 6.5L13.5 8.5L15.25 6.25\" fill=\"none\"/>\n        </svg>\n    )\n}\n\nexport default SvgLoader","import SvgLoader from \"./SvgLoader\"\n\nconst Loading = () => {\n    return <div className=\"loading-element\">\n            <SvgLoader />\n            Loading...\n           </div>\n}\n\nexport default Loading","const RandomCharacterCard = ({\n    name,\n    nickname,\n    birthday,\n    img,\n    status,\n    portrayed,\n    occupation\n}) => {\n\n    const statusClassMapping = {\n        'Alive': 'character-card-random__item character-card-random__item_green',\n        'Deceased': 'character-card-random__item character-card-random__item_red',\n        'Presumed dead': 'character-card-random__item character-card-random__item_orange',\n    }\n\n    return (\n        <div className=\"character-card__wrapper h\">\n            <div className=\"front\">\n                <h1 className=\"character-card-random__title\">{nickname}</h1>\n                <img className=\"character-card__img\" src={img} alt={nickname} />\n            </div>\n            <div className=\"back\">\n                <ul className=\"character-card-random__list\">\n                    <li className=\"character-card-random__item\">\n                        <b>Real name:</b>\n                        <span className=\"character-card-random__text\">\n                            {name}\n                        </span>\n                    </li>\n                    <li className=\"character-card-random__item\">\n                        <b>Birthday:</b>\n                        <span className=\"character-card-random__text\">\n                            {birthday || 'unknown'}\n                        </span>\n                    </li>\n                    <li className=\"character-card-random__item\">\n                        <b>Occupation:</b> \n                        <span className=\"character-card-random__text\">\n                            {occupation[0]}\n                        </span>\n                    </li>\n                    <li className={ statusClassMapping[status] || \"character-card-random__item\"}>\n                        <b>Status:</b>\n                        <span className=\"character-card-random__text\">\n                            {status}\n                        </span>\n                    </li>\n                    <li className=\"character-card-random__item\">\n                        <b>Portrayed:</b>\n                        <span className=\"character-card-random__text\">\n                            {portrayed}\n                        </span>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomCharacterCard\n\n\n\n\n\n\n\n\n\n","import React, { useState } from 'react';\nimport CharacterCard from './CharacterCard/CharacterCard'\nimport Pagination from \"./Pagination/Pagination\"\nimport Loading from \"./Loading\"\nimport RandomCharacterCard from './RandomCharacterCard/RandomCharacterCard';\n\nclass CharactersList extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n          characters: [],\n          currentPage: 0,\n          isLoading: false,\n          buttonCounts: [1, 2, 3, 4, 5, 6, 7],\n      }\n    }\n\n    handleButton = (event) => {\n        const offsetCount = event.target.innerText * 10 - 10\n        this.setState({currentPage: offsetCount})\n        this.componentDidMount(offsetCount)\n    }\n\n    componentDidMount = (page = 0) => {\n        this.setState({isLoading: true})\n        fetch(`https://www.breakingbadapi.com/api/characters?limit=10&offset=${page}`)\n                .then(response => response.json())\n                .then(result => {\n                    this.setState({\n                        characters: result,\n                        isLoading: false\n                    })\n                }\n                )\n            }    \n    \n    render() {\n        return (\n            <div className=\"characters__list\">\n                {this.state.isLoading && (<Loading />)}\n                <ul className=\"App__list\">\n                {this.state.characters.map((item) => \n                    <li className=\"App__item\" key={item.char_id.toString()}>\n                    {/* <CharacterCard {...item} /> */}\n                    <RandomCharacterCard {...item} />\n                    </li>\n                    )\n                }\n                </ul>\n                <Pagination onClick={this.handleButton} buttonCounts={this.state.buttonCounts}/>\n            </div>\n        )\n}\n}\n\nexport default CharactersList","const Button = ({text, onClick}) => {\n    return <button className=\"main-page__button\" onClick={onClick}>{text}</button>\n}\n\nexport default Button","import React from 'react';\nimport RandomCharacterCard from './RandomCharacterCard'\nimport Button from \"../Button\"\nimport Loading from '../Loading';\n\nclass RandomCharacter extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n          character: [],\n          isLoading: false\n      }\n    }\n\n    componentDidMount = () => {\n        this.setState({isLoading: true})\n        fetch(`https://www.breakingbadapi.com/api/character/random`)\n                .then(response => response.json())\n                .then(result => {\n                    this.setState({\n                        character: result,\n                        isLoading: false\n                    })\n                }\n                )\n            }\n    \n    handleClick = () => {\n        this.componentDidMount()\n    }\n            \n    render() {\n        return (\n            <div className=\"App__random-character\">\n                {this.state.isLoading && (<Loading />)}\n                {this.state.character.map((item) => \n                    <RandomCharacterCard {...item} key={item.char_id}/>\n                    )\n                }\n                <Button text='Get another character!' onClick={this.handleClick}/>\n            </div>\n        )\n        \n}\n}\n\nexport default RandomCharacter\n","const EpisodeCard = ({\n    id,\n    title,\n    season,\n    episode,\n    series,\n    air_date,\n    characters\n}) => {\n    const charactersList = characters.join(', ')\n    const cells = []\n    for (let i = 0; i < 10; i++) {\n        cells.push(<li className=\"episode__block-mov-cell\" key={i}></li>)\n    }\n\n    return (\n        <div className=\"episode__block-mov\">\n            <ul className=\"episode__block-mov-column\">\n                {cells}\n            </ul>\n            <ul className=\"episode__list-mov\">\n                <li className=\"episode__item-mov\">\n                    <h2 className=\"episode__item-mov-title\">Title: \"{title}\"</h2>\n                </li>\n                <li className=\"episode__item-mov\">Episode: {episode}</li>\n                <li className=\"episode__item-mov\">Air date: {air_date}</li>\n                <li className=\"episode__item-mov\">Main characters: {charactersList}</li>\n                <li className=\"episode__item-mov\">Season: {season}</li>\n                <li className=\"episode__item-mov\">Series: {series}</li>\n            </ul>\n            <ul className=\"episode__block-mov-column\">\n                {cells}\n            </ul>\n        </div>\n    )\n}\n\nexport default EpisodeCard","import React from 'react'\nimport EpisodeCard from \"./EpisodeCard\"\nimport Loading from '../Loading';\nimport Pagination from \"../Pagination/Pagination\"\n\n\nclass EpisodeList extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n          episodes: [],\n          episodesToRender: [],\n          currentPage: 0,\n          isLoading: false,\n          buttonCounts: [1, 2, 3, 4, 5],\n      }\n    }\n\n    handleChangeSeason = (event) => {\n        const seasonCount = event.target.innerText\n        const seasonByCount = this.state.episodes.filter(item => item.season === seasonCount)\n        this.setState({\n            episodesToRender: seasonByCount,\n        })\n    }\n\n    componentDidMount = () => {\n        this.setState({isLoading: true})\n        fetch(`https://www.breakingbadapi.com/api/episodes?series=Breaking+Bad`)\n                .then(response => response.json())\n                .then(result => {\n                    this.setState({\n                        episodes: result,\n                        episodesToRender: result,\n                        isLoading: false\n                    })\n                }\n                )\n            }\n    \n    render() {\n        return (\n            <div>\n                <div className=\"episodes-pagintaion__wrapper\">\n                    <b>select season:</b>\n                    <Pagination onClick={this.handleChangeSeason} buttonCounts={this.state.buttonCounts}/>\n                </div>\n                <div className=\"episodes__wrapper\">\n                {this.state.isLoading && (<Loading />)}\n                \n                {this.state.episodesToRender.map((item) => \n                    <EpisodeCard {...item} key={item.episode_id}/>\n                    )\n                }\n            </div>\n            </div>\n           \n        )\n}\n}\n\nexport default EpisodeList","const QuoteCard = ({\n    quote,\n    author,\n    last_words = false\n}) => {\n    return (\n        <blockquote>\n            {last_words && (<p>Last words: </p>)}\n            <p className=\"quote-card__title\">{quote}</p>\n            {!last_words && (\n                <footer>\n                    — \n                    <cite>{author}</cite>\n                </footer>\n            )}\n           \n        </blockquote>\n    )\n}\n\nexport default QuoteCard","const CharacterImage = ({img, name}) => {\n    return <img className=\"character-image\" src={img} alt={name} />\n}\n\nexport default CharacterImage","const SelectQuote = ({author}) => {\n    return <option className=\"quote-list__option\" value={author}>{author}</option>\n}\n\nexport default SelectQuote","const QuotesButton = ({getQuoteByAuthor}) => {\n    return <button className=\"blockquote__button\" onClick={getQuoteByAuthor}>Get quotes by author</button>\n}\n\nexport default QuotesButton","import React from 'react';\nimport QuoteCard from './QuoteCard'\nimport Loading from '../Loading'\nimport CharacterImage from './CharacterImage'\nimport SelectQuote from './SelectQuote'\nimport QuotesButton from './QuotesButton'\n\nclass QuoteList extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n            quotes: [],\n            isLoading: false,\n            quoteAuthor: [],\n            characterImage: [],\n            authorsList: []\n      }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const formValue = document.getElementById('formQuote')\n        const searchValue = formValue.value\n        const url = (searchValue === 'all characters') ? 'quotes' : `quote?author=${searchValue}`\n\n        this.setState({isLoading: true})\n        fetch(`https://www.breakingbadapi.com/api/${url}`)\n                .then(response => response.json())\n                .then(result => {\n                    this.setState({\n                        quotes: result,\n                        isLoading: false,\n                    })\n                }\n                )\n\n        if (searchValue !== '') {\n            fetch(`https://www.breakingbadapi.com/api/characters?name=${searchValue}`)\n            .then(response => response.json())\n            .then(result => {\n            this.setState({\n                characterImage: result\n            })\n        })\n        }      \n    }\n\n    componentDidMount = () => {\n        this.setState({isLoading: true})\n\n        fetch(`https://www.breakingbadapi.com/api/quotes`)\n                .then(response => response.json())\n                .then(result => {\n                    this.setState({\n                        quotes: result,\n                        isLoading: false,\n                        authorsList: result,\n                    })\n                }\n                )\n            }\n    \n    getNoDoubleAuthor = () => {\n        const authorData = this.state.authorsList.map(\n            item => item.author\n        )\n        authorData.unshift('all characters')\n        return [...new Set(authorData)]\n    }\n\n    render() {\n        return (\n            <div className=\"blockquote__list\">\n                {this.state.isLoading && (<Loading />)}\n                <form className=\"quote-list__form\">\n                    <select className=\"quote-list__select\" id='formQuote'>\n                    {this.getNoDoubleAuthor().map((item) => \n                        <SelectQuote author={item} key={item}/>\n                        )\n                    }\n                    </select>\n                <QuotesButton getQuoteByAuthor={this.handleSubmit} />\n                </form>\n                \n                {this.state.characterImage.map((item) => \n                    <CharacterImage {...item} key={item.char_id}/>\n                    )\n                }\n\n                {this.state.quotes.map((item) => \n                    <QuoteCard {...item} key={item.quote_id}/>\n                    )\n                }\n            </div>\n        )\n}\n}\n\nexport default QuoteList","import QuoteCard from '../Quotes/QuoteCard'\n\nconst RandomDeathCard = ({\n    death,\n    cause,\n    responsible,\n    last_words,\n    img,\n    season,\n    episode\n}) => {\n\n    return (\n        <div className=\"death-card__wrapper\">\n            <div className=\"death-card__image-wrapper\">\n                <img className=\"death-card__img\" src={img} alt={death} />\n                <div className=\"death-card__info\">\n                    <ul className=\"death-card__list\">\n                        <li className=\"death-card__item\">\n                            <span className=\"death-card__item-text\">Name:</span>\n                            {death}\n                        </li>\n                        <li className=\"death-card__item\">\n                            <span className=\"death-card__item-text\">cause:</span> \n                            {cause}\n                        </li>\n                        <li className=\"death-card__item\">\n                            <span className=\"death-card__item-text\">responsible:</span> \n                            {responsible}\n                        </li>\n                        <li className=\"death-card__item\">\n                            <span className=\"death-card__item-text\">When?</span> \n                            season: {season}, episode:{episode}\n                        </li>\n                    </ul>\n                </div>\n            </div>\n            <QuoteCard quote={last_words} author={death} last_words ={true} />\n        </div>\n    )\n}\n\nexport default RandomDeathCard\n\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport RandomDeathCard from './RandomDeathCard'\nimport Button from \"../Button\"\nimport Loading from '../Loading';\n\nclass RandomDeathList extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n          death: {},\n          isLoading: false\n      }\n    }\n\n    componentDidMount = () => {\n        this.setState({isLoading: true})\n        fetch(`https://breakingbadapi.com/api/random-death`)\n                .then(response => response.json())\n                .then(result => {\n                    this.setState({\n                        death: {...result},\n                        isLoading: false\n                    })\n                }\n                )\n            }\n    \n    handleClick = () => {\n        this.componentDidMount()\n    }\n            \n    render() {\n        return (\n            <div className=\"death-list_wrapper\">\n                {this.state.isLoading && (<Loading />)}\n                <RandomDeathCard {...this.state.death} key={this.state.death.death_id}/>\n                <div className=\"death-card__action\">\n                    <span className=\"death-card__action-text\">Click here to find out about a random death!</span>\n                    <Button text='Get another death!' onClick={this.handleClick}/>\n                </div>\n                \n            </div>\n        )\n        \n}\n}\n\nexport default RandomDeathList\n","import CharactersList from \"./CharactersList\"\nimport RandomCharacter from \"./RandomCharacterCard/RandomCharacterList\"\nimport EpisodeList from \"./Episodes/EpisodeList\"\nimport QuoteList from './Quotes/QuoteList'\nimport RandomDeathList from './Deaths/RandomDeathList'\n\n\nfunction MainPage({page}) {\n\n    const renderMapping = {\n        'Random Character': function() {\n            return (\n                <div><RandomCharacter /></div>\n            )\n        },\n        'Characters': function() {\n            return (\n                <div><CharactersList/></div>\n            )\n        },\n        'Episodes': function() {\n            return <div><EpisodeList /></div>\n        },\n        'Quotes': function() {\n            return <div><QuoteList /></div>\n        },\n        'Deaths': function() {\n            return <div><RandomDeathList /></div>\n        },\n    }\n \n    return (\n      <div>\n            {renderMapping[page]()}\n      </div>  \n    )\n}\n\nexport default MainPage","const MainTitle = () => {\n return (\n    <h1 className=\"App__title\">Welcome to Breaking bad WIKI!</h1>\n )\n}\n\nexport default MainTitle","import '../src/css/reset.css';\nimport '../src/css/App.css';\nimport '../src/components/CharacterCard/CharacterCard.css';\nimport '../src/components/RandomCharacterCard/RandomCharacterCard.css'\nimport '../src/components/Pagination/Pagination.css'\nimport '../src/components/Episodes/Episode.css'\nimport '../src/components/Quotes/Quotes.css'\nimport '../src/components/Deaths/RandomDeathCard.css'\n\nimport NavigationItems from '../src/components/NavigationItems';\nimport MainPage from '../src/components/MainPage'\nimport { useState } from 'react';\nimport MainTitle from './components/MainTitle';\n\nfunction App() {\n  const [navItem, setNavItem] = useState('Random Character')\n  \n  const handleChangeNavItem = (event) => {\n    setNavItem(event.target.value)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__navigation\" onChange={handleChangeNavItem}>\n          <NavigationItems />\n      </div>\n      <div className=\"App__content\">\n        <MainTitle />\n        <MainPage page={navItem}/> \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}